import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import sqlite3
import re
import threading
import time
from datetime import datetime, timedelta
import os
import time
import speech_recognition as sr
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build

SCOPES = ["https://www.googleapis.com/auth/calendar"]


TOKEN = "7775736653:AAE2wPWW_i_azWNzj-ShBP9F7hDbKdwha-U"
bot = telebot.TeleBot(TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
def init_db():
    conn = sqlite3.connect("database.db")
    cur = conn.cursor()

    # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É —Å –Ω—É–∂–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏ —Å—Ä–∞–∑—É
    cur.execute('''
        CREATE TABLE IF NOT EXISTS schedule (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            event TEXT NOT NULL,
            event_time TEXT NOT NULL,
            event_day TEXT NOT NULL,
            event_location TEXT NOT NULL
        )
    ''')

    conn.commit()
    conn.close()

init_db()

# –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
DAYS_RU = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∑–∞–¥
def go_back(message):
    bot.send_message(message.chat.id, "üîô –û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
    markup.add(KeyboardButton("üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
    markup.add(KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
    markup.add(KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
    return markup

@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, "üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞:")
    bot.register_next_step_handler(message, check_password)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
def check_password(message):
    if message.text == "1234":
        bot.send_message(message.chat.id, f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!", reply_markup=main_menu())
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, check_password)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def add_schedule(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))  #
    bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥':", reply_markup=markup)
    bot.register_next_step_handler(message, get_event_day)


def get_event_day(message):
    if message.text == "üîô –ù–∞–∑–∞–¥":  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ù–∞–∑–∞–¥"
        go_back(message)
        return

    event_name = message.text.strip()
    bot.send_message(message.chat.id, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'):")
    bot.register_next_step_handler(message, get_event_location, event_name)

def get_event_location(message, event_name):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        go_back(message)
        return

    event_day = message.text.strip()
    bot.send_message(message.chat.id, "üìç –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ì–£–ö 533):")
    bot.register_next_step_handler(message, get_event_time, event_name, event_day)

def get_event_time(message, event_name, event_day):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        go_back(message)
        return

    event_location = message.text.strip()
    bot.send_message(message.chat.id, "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:30):")
    bot.register_next_step_handler(message, save_schedule, event_name, event_day, event_location)

def add_to_google_calendar(event_name, day_str, time_str, location):
    creds = None
    if os.path.exists("token.json"):
        creds = Credentials.from_authorized_user_file("token.json", SCOPES)
    else:
        flow = InstalledAppFlow.from_client_secrets_file("credentials.json", SCOPES)
        creds = flow.run_local_server(port=0)
        with open("token.json", "w") as token:
            token.write(creds.to_json())

    service = build("calendar", "v3", credentials=creds)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è –≤ datetime
    now = datetime.now()
    days_map = {
        "–ü–Ω": 0, "–í—Ç": 1, "–°—Ä": 2, "–ß—Ç": 3, "–ü—Ç": 4, "–°–±": 5, "–í—Å": 6,
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0, "–í—Ç–æ—Ä–Ω–∏–∫": 1, "–°—Ä–µ–¥–∞": 2, "–ß–µ—Ç–≤–µ—Ä–≥": 3, "–ü—è—Ç–Ω–∏—Ü–∞": 4, "–°—É–±–±–æ—Ç–∞": 5, "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 6
    }
    weekday_target = days_map.get(day_str, 0)
    days_ahead = (weekday_target - now.weekday()) % 7
    event_date = now + timedelta(days=days_ahead)

    event_datetime = datetime.strptime(f"{event_date.date()} {time_str}", "%Y-%m-%d %H:%M")
    end_datetime = event_datetime + timedelta(hours=1)

    event = {
        "summary": event_name,
        "location": location,
        "start": {
            "dateTime": event_datetime.isoformat(),
            "timeZone": "Asia/Almaty",  # –ó–∞–º–µ–Ω–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        },
        "end": {
            "dateTime": end_datetime.isoformat(),
            "timeZone": "Asia/Almaty",
        },
    }

    event = service.events().insert(calendarId="primary", body=event).execute()
    print("üóì –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—å:", event.get("htmlLink"))

def save_schedule(message, event_name, event_day, event_location):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        go_back(message)
        return

    user_id = message.chat.id
    time_str = message.text.strip()

    if not re.match(r"^\d{1,2}:\d{2}$", time_str):
        bot.send_message(user_id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –í–≤–µ–¥–∏—Ç–µ —Ç–∞–∫: '12:30'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, lambda msg: save_schedule(msg, event_name, event_day, event_location))
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏
    hours, minutes = map(int, time_str.split(":"))
    if hours > 23 or minutes > 59:
        bot.send_message(user_id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏! –ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23, –º–∏–Ω—É—Ç—ã ‚Äî –æ—Ç 0 –¥–æ 59.")
        bot.register_next_step_handler(message, lambda msg: save_schedule(msg, event_name, event_day, event_location))
        return

    # ‚úÖ –í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
    conn = sqlite3.connect("database.db")
    cur = conn.cursor()
    cur.execute("INSERT INTO schedule (user_id, event, event_time, event_day, event_location) VALUES (?, ?, ?, ?, ?)",
                (user_id, event_name, time_str, event_day, event_location))
    conn.commit()
    conn.close()

    bot.send_message(user_id, f"‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {event_name} –≤ {time_str}, {event_day}, {event_location}", reply_markup=main_menu())
    try:
        add_to_google_calendar(event_name, event_day, time_str, event_location)
        bot.send_message(user_id, "üóì –°–æ–±—ã—Ç–∏–µ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à Google –ö–∞–ª–µ–Ω–¥–∞—Ä—å.")
    except Exception as e:
        bot.send_message(user_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—å: {e}")



# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@bot.message_handler(func=lambda message: message.text == "üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def view_schedule(message):
    user_id = message.chat.id

    conn = sqlite3.connect("database.db")
    cur = conn.cursor()
    cur.execute(
        "SELECT event, event_day, event_time, event_location FROM schedule WHERE user_id = ? ORDER BY event_day, event_time",
        (user_id,))
    events = cur.fetchall()
    conn.close()

    if events:
        response = "üìÖ –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
        for event, day, time_str, location in events:
            response += f"‚û° {event} ({day}) –≤ {time_str}, {location}\n"
    else:
        response = "üì≠ –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ."

    bot.send_message(user_id, response, reply_markup=main_menu())

# –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
@bot.message_handler(func=lambda message: message.text == "üóë –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def delete_schedule(message):
    user_id = message.chat.id

    conn = sqlite3.connect("database.db")
    cur = conn.cursor()
    cur.execute("SELECT id, event, event_day, event_time, event_location FROM schedule WHERE user_id = ?", (user_id,))
    events = cur.fetchall()
    conn.close()

    if not events:
        bot.send_message(user_id, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=main_menu())
        return

    response = "üóë –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥':\n"
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for event in events:
        markup.add(KeyboardButton(str(event[0])))  # –ö–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏
    markup.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(user_id, response, reply_markup=markup)
    bot.register_next_step_handler(message, confirm_delete)

def confirm_delete(message):
    if message.text == "üîô –ù–∞–∑–∞–¥":  # üõë –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        go_back(message)  # üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return
    user_id = message.chat.id
    event_id = message.text

    if not event_id.isdigit():
        bot.send_message(user_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!", reply_markup=main_menu())

        return

    conn = sqlite3.connect("database.db")
    cur = conn.cursor()
    cur.execute("DELETE FROM schedule WHERE id = ? AND user_id = ?", (event_id, user_id))
    conn.commit()
    conn.close()

    bot.send_message(user_id, "‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ!", reply_markup=main_menu())

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
@bot.message_handler(func=lambda message: message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def edit_schedule(message):
    user_id = message.chat.id

    conn = sqlite3.connect("database.db")
    cur = conn.cursor()
    cur.execute("SELECT id, event, event_day, event_time, event_location FROM schedule WHERE user_id = ?", (user_id,))
    events = cur.fetchall()
    conn.close()

    if not events:
        bot.send_message(user_id, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=main_menu())
        return

    response = "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥':\n"
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for event in events:
        markup.add(KeyboardButton(str(event[0])))  # –ö–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏
    markup.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))  # üî• –î–û–ë–ê–í–ò–õ–ò –ö–ù–û–ü–ö–£ "–ù–ê–ó–ê–î"
    bot.send_message(user_id, response, reply_markup=markup)
    bot.register_next_step_handler(message, ask_new_event)

def ask_new_event(message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        go_back(message)
        return
    user_id = message.chat.id
    event_id = message.text

    if not event_id.isdigit():
        bot.send_message(user_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!", reply_markup=main_menu())
        return

    bot.send_message(user_id, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'–ù–∞–∑–≤–∞–Ω–∏–µ –î–µ–Ω—å(–ü–Ω/–í—Ç/–°—Ä) –í—Ä–µ–º—è(14:00) –ú–µ—Å—Ç–æ'\n–ü—Ä–∏–º–µ—Ä: '–õ–µ–∫—Ü–∏—è –ø–æ NoSQL –°—Ä 15:25 –ì–£–ö 535'")
    bot.register_next_step_handler(message, lambda msg: update_schedule(msg, event_id))

def update_schedule(message, event_id):
    user_id = message.chat.id
    text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ (—Ä–∞–∑—Ä–µ—à–µ–Ω—ã –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏)
    match = re.match(
        r"(.+?)\s+(–ü–Ω|–í—Ç|–°—Ä|–ß—Ç|–ü—Ç|–°–±|–í—Å|–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–í—Ç–æ—Ä–Ω–∏–∫|–°—Ä–µ–¥–∞|–ß–µ—Ç–≤–µ—Ä–≥|–ü—è—Ç–Ω–∏—Ü–∞|–°—É–±–±–æ—Ç–∞|–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)\s+(\d{1,2}:\d{2})\s+(.+)",
        text)
    if not match:
        bot.send_message(user_id, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '–ù–∞–∑–≤–∞–Ω–∏–µ –î–µ–Ω—å(–ü–Ω/–í—Ç/–°—Ä) –í—Ä–µ–º—è(14:00) –ú–µ—Å—Ç–æ'")
        return

    event, day, time_str, location = match.groups()

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    conn = sqlite3.connect("database.db")
    cur = conn.cursor()
    cur.execute(
        "UPDATE schedule SET event = ?, event_day = ?, event_time = ?, event_location = ? WHERE id = ? AND user_id = ?",
        (event, day, time_str, location, event_id, user_id))

    conn.commit()
    conn.close()

    bot.send_message(user_id, "‚úÖ –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=main_menu())

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def reminder():
    days_map = {
        "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
        "Wednesday": "–°—Ä–µ–¥–∞",
        "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
        "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
        "Saturday": "–°—É–±–±–æ—Ç–∞",
        "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }

    while True:
        now = datetime.now()
        current_day = days_map[now.strftime("%A")]  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        reminder_time = (now + timedelta(minutes=15)).strftime("%H:%M")

        conn = sqlite3.connect("database.db")
        cur = conn.cursor()
        cur.execute("SELECT user_id, event, event_location FROM schedule WHERE event_day = ? AND event_time = ?",
                    (current_day, reminder_time))
        events = cur.fetchall()
        conn.close()

        for user_id, event, loc in events:
            bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç {event} –≤ {loc}!")

        time.sleep(60)


# –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=reminder, daemon=True).start()



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")


    @bot.message_handler(content_types=["voice"])
    def handle_voice(message):
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            file_info = bot.get_file(message.voice.file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ OGG
            ogg_filename = f"voice_{message.chat.id}.ogg"
            wav_filename = f"voice_{message.chat.id}.wav"

            with open(ogg_filename, "wb") as f:
                f.write(downloaded_file)

            # 3. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OGG –≤ WAV —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—É—Ç–∏ –∫ ffmpeg
            os.system(r'"C:\ProgramData\chocolatey\bin\ffmpeg.exe" -i {} {} -y'.format(ogg_filename, wav_filename))

            # üîπ –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞, —á—Ç–æ–±—ã ffmpeg —É—Å–ø–µ–ª –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª
            time.sleep(1)

            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª—Å—è –ª–∏ —Ñ–∞–π–ª WAV
            if not os.path.exists(wav_filename):
                bot.send_message(message.chat.id, "‚ö† –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            # 5. –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ä–µ—á—å
            recognizer = sr.Recognizer()
            with sr.AudioFile(wav_filename) as source:
                audio = recognizer.record(source)
                text = recognizer.recognize_google(audio, language="ru-RU")

            # üîπ –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
            match = re.match(
                r"(.+?)\s+(–ü–Ω|–í—Ç|–°—Ä|–ß—Ç|–ü—Ç|–°–±|–í—Å|–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–í—Ç–æ—Ä–Ω–∏–∫|–°—Ä–µ–¥–∞|–ß–µ—Ç–≤–µ—Ä–≥|–ü—è—Ç–Ω–∏—Ü–∞|–°—É–±–±–æ—Ç–∞|–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)\s+(\d{1,2}:\d{2})\s+(.+)",
                text,
                re.IGNORECASE
            )

            if match:
                event, day, time_str, location = match.groups()
                day = day.capitalize()

                conn = sqlite3.connect("database.db")
                cur = conn.cursor()
                cur.execute(
                    "INSERT INTO schedule (user_id, event, event_time, event_day, event_location) VALUES (?, ?, ?, ?, ?)",
                    (message.chat.id, event, time_str, day, location))
                conn.commit()
                conn.close()

                bot.send_message(message.chat.id,
                                 f"‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {event} –≤ {time_str}, {day}, {location}",
                                 reply_markup=main_menu())
            else:
                bot.send_message(message.chat.id,
                                 "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '–ù–∞–∑–≤–∞–Ω–∏–µ –î–µ–Ω—å(–ü–Ω/–í—Ç/–°—Ä) –í—Ä–µ–º—è(14:00) –ú–µ—Å—Ç–æ'")

            # 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.send_message(message.chat.id, f"üéô –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")

        except sr.UnknownValueError:
            bot.send_message(message.chat.id, "‚ö† –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ.")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        finally:
            # 7. –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if os.path.exists(ogg_filename):
                os.remove(ogg_filename)
            if os.path.exists(wav_filename):
                os.remove(wav_filename)

    bot.polling(none_stop=True)
